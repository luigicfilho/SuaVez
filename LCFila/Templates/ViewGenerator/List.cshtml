@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@using Microsoft.VisualStudio.Web.CodeGeneration.EntityFrameworkCore
@using System.Collections.Generic
@using System.Linq
@@model @GetEnumerableTypeExpression(Model.ViewDataTypeName)

@{
    if (Model.IsPartialView)
    {
    }
    else if (Model.IsLayoutPageSelected)
    {
@:@@{
    @:ViewData["Title"] = "@Model.ViewName";
        if (!string.IsNullOrEmpty(Model.LayoutPageFile))
        {
    @:Layout = "@Model.LayoutPageFile";
        }
@:}
@:
@:<!-- Content Wrapper. Contains page content -->
@:<div class="content-wrapper">
@:    <!-- Content Header (Page header) -->
@:    <section class="content-header">
@:        <div class="container-fluid">
@:            <div class="row mb-2">
@:                <div class="col-sm-6">
@:                    <h1>@Model.ViewDataTypeShortName</h1>
@:                </div>
@:                <div class="col-sm-6">
@:                    <ol class="breadcrumb float-sm-right">
@:                        <li class="breadcrumb-item"><a asp-area="" asp-controller="Home" asp-action="Index">Home</a></li>
@:                        <li class="breadcrumb-item active">@Model.ViewDataTypeShortName</li>
@:                    </ol>
@:                </div>
@:            </div>
@:        </div><!-- /.container-fluid -->
@:    </section>
@:
    }
    else
    {
@:@@{
    @:Layout = null;
@:}
@:
@:<!DOCTYPE html>
@:
@:<html>
@:<head>
    @:<meta name="viewport" content="width=device-width" />
    @:<title>@Model.ViewName</title>
@:</head>
@:<body>
        //    PushIndent("    ");
    }
    @:<!-- Main content -->
    @:<section class="content">
    @:
    @:    <!-- Default box -->
    @:    <div class="card">
    @:        <div class="card-header">
    @:            <h3 class="card-title">Lista de @Model.ViewDataTypeShortName</h3>
    @:
    @:            <div class="card-tools">
    @:                <button type="button" class="btn btn-tool" data-card-widget="collapse" data-toggle="tooltip" title="Collapse">
    @:                    <i class="fas fa-minus"></i>
    @:                </button>
    @:                <button type="button" class="btn btn-tool" data-card-widget="remove" data-toggle="tooltip" title="Remove">
    @:                    <i class="fas fa-times"></i>
    @:                </button>
    @:            </div>
    @:        </div>
    @:        <div class="card-body">
    @:            <table id="example" class="table  table-striped ">
    @:<thead>
        @:<tr>
        Dictionary<string, IPropertyMetadata> propertyLookup = ((IModelMetadata)Model.ModelMetadata).Properties.ToDictionary(x => x.PropertyName, x => x);
        Dictionary<string, INavigationMetadata> navigationLookup = ((IModelMetadata)Model.ModelMetadata).Navigations.ToDictionary(x => x.AssociationPropertyName, x => x);

        foreach (var item in Model.ModelMetadata.ModelType.GetProperties())
        {
            if (propertyLookup.TryGetValue(item.Name, out IPropertyMetadata property)
                && property.Scaffold && !property.IsForeignKey && !property.IsPrimaryKey)
            {
            <th>
                @@Html.DisplayNameFor(model => model.@GetValueExpression(property))
            </th>
            }
            else if (navigationLookup.TryGetValue(item.Name, out INavigationMetadata navigation))
            {
            <th>
                @@Html.DisplayNameFor(model => model.@GetValueExpression(navigation))
            </th>
            }
        }
            @:<th></th>
        @:</tr>
    @:</thead>
    @:<tbody>
@:@@foreach (var item in Model) {
        @:<tr>
        foreach (var item in Model.ModelMetadata.ModelType.GetProperties())
        {
            if (propertyLookup.TryGetValue(item.Name, out IPropertyMetadata property)
                && property.Scaffold && !property.IsForeignKey && !property.IsPrimaryKey)
            {
            <td>
                @@Html.DisplayFor(modelItem => item.@GetValueExpression(property))
            </td>
            }
            else if (navigationLookup.TryGetValue(item.Name, out INavigationMetadata navigation))
            {
            <td>
                @@Html.DisplayFor(modelItem => item.@GetValueExpression(navigation).@navigation.DisplayPropertyName)
            </td>
            }
        }
        string pkName = GetPrimaryKeyName();
        if (pkName != null)
        {
            @:<td class="text-right">
                @:<a class="btn btn-primary btn-sm" asp-action="Details" asp-route-id="@@item.@pkName"><i class="fas fa-folder"></i></a>
                @:<a class="btn btn-info btn-sm" asp-action="Edit" asp-route-id="@@item.@pkName"><i class="fas fa-pencil-alt"></i></a>
                @:<a class="btn btn-danger btn-sm" asp-action="Delete" asp-route-id="@@item.@pkName"><i class="fas fa-trash"></i></a>
            @:</td>
        }
        else
        {
            <td>
                @@Html.ActionLink("Edit", "Edit", new { /* id=item.PrimaryKey */ }) |
                @@Html.ActionLink("Details", "Details", new { /* id=item.PrimaryKey */ }) |
                @@Html.ActionLink("Delete", "Delete", new { /* id=item.PrimaryKey */ })
            </td>
        }
        @:</tr>
@:}
    @:</tbody>

@:</table>
@:    </div>
@:     <div class="card-footer">
@:                <a class="btn btn-success" asp-action="Create">Inserir</a>
@:            </div>
@:            <!-- /.card-footer-->
@:        </div>
@:        <!-- /.card -->
@:    </section>
@:    <!-- /.content -->
@:</div>
@:
@:
@:@@section Scripts {
@:    <script>
@:        $(document).ready(function () {
@:         $("#example").DataTable();
@:        });
@:    </script>
@:}
    if(!Model.IsPartialView && !Model.IsLayoutPageSelected)
    {
        //ClearIndent();
@:</body>
@:</html>
    }
}
@functions
{
    string GetPrimaryKeyName()
    {
        return (Model.ModelMetadata.PrimaryKeys != null && Model.ModelMetadata.PrimaryKeys.Length == 1)
        ? Model.ModelMetadata.PrimaryKeys[0].PropertyName
        : null;
    }

    string GetValueExpression(IPropertyMetadata property)
    {
        return property.PropertyName;
    }

    string GetValueExpression(INavigationMetadata navigation)
    {
        return navigation.AssociationPropertyName;
    }

    string GetEnumerableTypeExpression(string typeName)
    {
        return "IEnumerable<" + typeName + ">";
    }
}
